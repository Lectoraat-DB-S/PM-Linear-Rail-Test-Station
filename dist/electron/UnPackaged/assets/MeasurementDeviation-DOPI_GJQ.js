import { q as qe } from "./vue3-apexcharts-BoDA3iQo.js";
import { _ as _export_sfc, E as resolveComponent, F as openBlock, G as createBlock } from "./index-B8gzy2O7.js";
const _sfc_main = {
  name: "MeasurementDeviation",
  components: {
    VueApexCharts: qe
  },
  data() {
    return {
      series: [{
        name: "Desktops",
        data: [-0.44, 0.2, 0.02, -0.07, 0.49, -0.15, 0.01, 0.03]
      }],
      chartOptions: {
        chart: {
          height: 350,
          type: "line",
          zoom: {
            enabled: false
          },
          annotations: {
            yaxis: [{
              y: 0,
              borderColor: "#00E396",
              label: {
                borderColor: "#00E396",
                style: {
                  color: "#fff",
                  background: "#00E396"
                },
                text: "Support"
              }
            }, {
              y: 0.3,
              y2: -0.3,
              borderColor: "#000",
              fillColor: "#FEB019",
              opacity: 0.2,
              label: {
                borderColor: "#333",
                style: {
                  fontSize: "10px",
                  color: "#333",
                  background: "#FEB019"
                },
                text: "Y-axis range"
              }
            }]
          }
        },
        colors: ["#545454"],
        dataLabels: {
          enabled: true
        },
        stroke: {
          curve: "straight"
        },
        title: {
          text: "Product Trends by Month",
          align: "left"
        },
        grid: {
          row: {
            colors: ["#f3f3f3", "transparent"],
            // takes an array which will be repeated on columns
            opacity: 0.5
          }
        },
        xaxis: {
          categories: ["Begin", "Gat 1", "Gat 2", "Gat 3", "Gat 4", "Gat 5", "Gat 6", "Einde"],
          title: {
            text: "Rails"
          }
        },
        yaxis: {
          title: {
            text: "Afwijking (mm)"
          },
          min: -1,
          max: 1
        }
      }
    };
  }
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_VueApexCharts = resolveComponent("VueApexCharts");
  return openBlock(), createBlock(_component_VueApexCharts, {
    type: "line",
    height: "350",
    options: $data.chartOptions,
    series: $data.series
  }, null, 8, ["options", "series"]);
}
const MeasurementDeviation = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "MeasurementDeviation.vue"]]);
export {
  MeasurementDeviation as default
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
