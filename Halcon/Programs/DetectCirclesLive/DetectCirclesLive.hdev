<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="23.11.0.0">
<procedure name="main">
<interface/>
<body>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="2">* Matching 01: ************************************************</c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="3">* Matching 01: BEGIN of generated code for model initialization</c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="4">* Matching 01: ************************************************</c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="5">* </c>
<c></c>
<c>* Read the calibration data.</c>
<l>*read_cam_par ('camera_parameters.cal', CameraParam)</l>
<l>*read_pose ('pose.dat', Pose)</l>
<c></c>
<c></c>
<l>read_image (Image, 'C:/Users/lucas/Documents/GitHub/PM-Linear-Rail-Test-Station/Halcon/Programs/DetectCirclesLive/img.png')</l>
<c></c>
<c></c>
<c>* Matching 01: Build the ROI from basic regions</c>
<l>gen_circle (ModelRegion, 1529.79, 2873.57, 53.1981)</l>
<c></c>
<c>* </c>
<c>* Matching 01: Reduce the model template</c>
<l>reduce_domain (Image, ModelRegion, TemplateImage)</l>
<c>* </c>
<c>* Matching 01: Create and train the shape model</c>
<l>create_generic_shape_model (ModelID)</l>
<c>* Matching 01: set the model parameters</c>
<l>set_generic_shape_model_param (ModelID, 'iso_scale_max', 1.71)</l>
<l>set_generic_shape_model_param (ModelID, 'iso_scale_min', 0.69)</l>
<l>set_generic_shape_model_param (ModelID, 'metric', 'use_polarity')</l>
<l>train_generic_shape_model (TemplateImage, ModelID)</l>
<c>* </c>
<c>* Matching 01: Get the model contour for transforming it later into the image</c>
<l>get_shape_model_contours (ModelContours, ModelID, 1)</l>
<c>* </c>
<c>* Matching 01: Support for displaying the model</c>
<c>* Matching 01: Get the reference position</c>
<l>area_center (ModelRegion, ModelRegionArea, RefRow, RefColumn)</l>
<l>vector_angle_to_rigid (0, 0, 0, RefRow, RefColumn, 0, HomMat2D)</l>
<l>affine_trans_contour_xld (ModelContours, TransContours, HomMat2D)</l>
<c>* </c>
<c>* Matching 01: Display the model contours</c>
<l>dev_display (Image)</l>
<l>dev_set_color ('green')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_display (ModelRegion)</l>
<l>dev_display (TransContours)</l>
<l>stop ()</l>
<c>* </c>
<c>* Matching 01: END of generated code for model initialization</c>
<c>* Matching 01:  * * * * * * * * * * * * * * * * * * * * * * *</c>
<c>* Matching 01: BEGIN of generated code for model application</c>
<c>* Matching 01: Set the search paramaters</c>
<l>set_generic_shape_model_param (ModelID, 'min_score', 0.99)</l>
<l>set_generic_shape_model_param (ModelID, 'max_overlap', 0)</l>
<l>set_generic_shape_model_param (ModelID, 'border_shape_models', 'false')</l>
<l>set_generic_shape_model_param (ModelID, 'pyramid_level_robust_tracking', 'true')</l>
<c>* </c>
<c></c>
<c></c>
<c></c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="6">* Matching 01: Initialize acquisition</c>
<l> open_framegrabber ('USB3Vision', 1, 1, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', '2BA200004153_DahengImaging_MER2200019U3M', 0, -1, AcqHandle)</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<c></c>
<c></c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="8">* Image Acquisition 01: Attention: The parameterization may fail in case parameters need to</c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="9">* Image Acquisition 01: be set in a specific order (e.g., image resolution vs. offset).</c>
<c>**set_framegrabber_param (AcqHandle, 'ExposureAuto', 'Continuous')</c>
<c>**set_framegrabber_param (AcqHandle, 'ExposureAutoMax', 50000)</c>
<c as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="12">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[1,1,1]" as_ord="1">* Matching 01: Obtain the model image</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,1,1]" as_ord="2">grab_image (Image, AcqHandle)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[1,1,2]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[4]" as_ord="1"></c>
<l as_id="matching" as_name="Matching 01" as_grp="[4]" as_ord="2">while (true)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[5]" as_ord="1">    * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[5]" as_ord="2">    * Matching 01: Obtain the image</c>
<l as_id="matching" as_name="Matching 01" as_grp="[5]" as_ord="3">    grab_image (Image, AcqHandle)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[6]" as_ord="1">    * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[6]" as_ord="2">    * Matching 01: Find the model</c>
<l as_id="matching" as_name="Matching 01" as_grp="[6]" as_ord="3">    find_generic_shape_model (Image, ModelID, MatchResultID, NumMatchResult)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[7,0]" as_ord="1">    * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[7,0]" as_ord="2">    * Matching 01: Retrieve results</c>
<l>for I := 0 to NumMatchResult-1 by 1</l>
<c>    * </c>
<c>    * Matching 01: Retrieve parameters of the detected match</c>
<l>    get_generic_shape_model_result (MatchResultID, I, 'row', Row)</l>
<l>    get_generic_shape_model_result (MatchResultID, I, 'column', Column)</l>
<l>    get_generic_shape_model_result (MatchResultID, I, 'angle', Angle)</l>
<l>    get_generic_shape_model_result (MatchResultID, I, 'scale_row', ScaleRow)</l>
<l>    get_generic_shape_model_result (MatchResultID, I, 'scale_column', ScaleColumn)</l>
<l>    get_generic_shape_model_result (MatchResultID, I, 'hom_mat_2d', HomMat2D)</l>
<l>    get_generic_shape_model_result (MatchResultID, I, 'score', Score)</l>
<c>    </c>
<c>    * Display the contours of the detected circles</c>
<l>    get_generic_shape_model_result_object (MatchContour, MatchResultID, I, 'contours')</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (MatchContour)</l>
<c></c>
<c>    * Draw line between circles if it's not the first one</c>
<l>    if (I &gt; 0)</l>
<c>        * Retrieve the parameters of the previous detected match</c>
<l>        get_generic_shape_model_result (MatchResultID, I-1, 'row', PrevRow)</l>
<l>        get_generic_shape_model_result (MatchResultID, I-1, 'column', PrevColumn)</l>
<c>        </c>
<c>        * Get the handle of the active graphics window</c>
<l>        dev_get_window (WindowHandle)</l>
<c>        </c>
<c>        * Draw a line between the current and previous circles</c>
<l>        dev_set_color ('pink')</l>
<l>        distance_pp (PrevRow, PrevColumn, Row, Column, Distance)</l>
<l>        disp_line (WindowHandle, PrevRow, PrevColumn, Row, Column)</l>
<c>        </c>
<c>        * Calculate the midpoint of the line</c>
<l>        MidRow := (PrevRow + Row) / 2</l>
<l>        MidColumn := (PrevColumn + Column) / 2</l>
<c>        </c>
<c>        * Change distance scale</c>
<l>        Distance:= Distance / 66.0004991</l>
<c>        </c>
<c>        * Display the distance text</c>
<l>        dev_set_color ('red')</l>
<l>        dev_disp_text ('Distance: ' + Distance, 'image', MidRow, MidColumn, 'red', [], [])</l>
<l>    endif</l>
<c>    </c>
<c>    * Store the current row and column for the next iteration</c>
<l>    PrevRow := Row</l>
<l>    PrevColumn := Column</l>
<l>endfor</l>
<l>*stop ()</l>
<c></c>
<c></c>
<c></c>
<c as_id="matching" as_name="Matching 01" as_grp="[8,1]" as_ord="1">    * </c>
<c as_id="matching" as_name="Matching 01" as_grp="[8,1]" as_ord="2">    * Matching 01: Code for alignment of e.g., measurements</c>
<l as_id="matching" as_name="Matching 01" as_grp="[8,2]" as_ord="1">    for I := 0 to NumMatchResult-1 by 1</l>
<c as_id="matching" as_name="Matching 01" as_grp="[8,3]" as_ord="1">        * Matching 01: Retrieve a hom_mat2d for each of the matching results</c>
<c as_id="matching" as_name="Matching 01" as_grp="[8,3]" as_ord="2">        * Matching 01: Retrieve the matching results</c>
<l as_id="matching" as_name="Matching 01" as_grp="[8,3]" as_ord="3">        get_generic_shape_model_result (MatchResultID, I, 'hom_mat_2d', HomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[8,3]" as_ord="4">        hom_mat2d_identity (AlignmentHomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[8,4]" as_ord="1">        hom_mat2d_translate (AlignmentHomMat2D, -RefRow, -RefColumn, AlignmentHomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[8,4]" as_ord="2">        hom_mat2d_compose (HomMat2D, AlignmentHomMat2D, AlignmentHomMat2D)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[8,5]" as_ord="1">        * Matching 01: Insert your code using the alignment here, e.g., code generated by</c>
<c as_id="matching" as_name="Matching 01" as_grp="[8,5]" as_ord="2">        * Matching 01: the measure assistant with the code generation option</c>
<c as_id="matching" as_name="Matching 01" as_grp="[8,5]" as_ord="3">        * Matching 01: 'Alignment Method' set to 'Affine Transformation'.</c>
<l as_id="matching" as_name="Matching 01" as_grp="[8,6]" as_ord="1">    endfor</l>
<l as_id="matching" as_name="Matching 01" as_grp="[10]" as_ord="1">endwhile</l>
<c as_id="matching" as_name="Matching 01" as_grp="[11]" as_ord="1">* </c>
<c as_id="matching" as_name="Matching 01" as_grp="[12]" as_ord="1">* Matching 01: *******************************************</c>
<c as_id="matching" as_name="Matching 01" as_grp="[12]" as_ord="2">* Matching 01: END of generated code for model application</c>
<c as_id="matching" as_name="Matching 01" as_grp="[12]" as_ord="3">* Matching 01: *******************************************</c>
<c as_id="matching" as_name="Matching 01" as_grp="[12]" as_ord="4">* </c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
